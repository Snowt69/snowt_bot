from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InputFile, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from database import Database
from config import config
import logging
import os
import psutil
import subprocess
import sys
import asyncio
from datetime import datetime, timedelta
import time
import shutil
import sqlite3
import platform
import cpuinfo
import GPUtil
import uuid
import socket
import requests
from typing import Optional, List, Dict, Any
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

router = Router()
db = Database()
logger = logging.getLogger(__name__)

class DeveloperStates(StatesGroup):
    waiting_for_broadcast = State()
    waiting_for_announcement = State()
    waiting_for_developer_id = State()
    waiting_for_sql_query = State()
    waiting_for_command = State()
    waiting_for_script = State()
    waiting_for_log_search = State()

def is_developer(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º"""
    return user_id in config.DEVELOPER_IDS or user_id == config.ADMIN_ID

def format_size(size_bytes: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    for unit in ['–ë', '–ö–ë', '–ú–ë', '–ì–ë']:
        if size_bytes < 1024.0:
            return f"{size_bytes:.1f} {unit}"
        size_bytes /= 1024.0
    return f"{size_bytes:.1f} –¢–ë"

def format_time(seconds: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if seconds < 1:
        return f"{seconds*1000:.0f}–º—Å"
    minutes, seconds = divmod(seconds, 60)
    hours, minutes = divmod(minutes, 60)
    days, hours = divmod(hours, 24)
    return f"{days}–¥ {hours}—á {minutes}–º {seconds:.0f}—Å"

def get_system_info() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
    info = {}
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ
    cpu_info = cpuinfo.get_cpu_info()
    info['cpu'] = {
        '–º–æ–¥–µ–ª—å': cpu_info.get('brand_raw', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
        '—è–¥—Ä–∞': psutil.cpu_count(logical=False),
        '–ø–æ—Ç–æ–∫–∏': psutil.cpu_count(logical=True),
        '–Ω–∞–≥—Ä—É–∑–∫–∞': psutil.cpu_percent(interval=1)
    }
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–º—è—Ç–∏
    memory = psutil.virtual_memory()
    info['–ø–∞–º—è—Ç—å'] = {
        '–≤—Å–µ–≥–æ': format_size(memory.total),
        '–¥–æ—Å—Ç—É–ø–Ω–æ': format_size(memory.available),
        '–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è': format_size(memory.used),
        '–ø—Ä–æ—Ü–µ–Ω—Ç': memory.percent
    }
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–µ
    disk = psutil.disk_usage('/')
    info['–¥–∏—Å–∫'] = {
        '–≤—Å–µ–≥–æ': format_size(disk.total),
        '–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è': format_size(disk.used),
        '—Å–≤–æ–±–æ–¥–Ω–æ': format_size(disk.free),
        '–ø—Ä–æ—Ü–µ–Ω—Ç': disk.percent
    }
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–∏
    net_io = psutil.net_io_counters()
    info['—Å–µ—Ç—å'] = {
        '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ': format_size(net_io.bytes_sent),
        '–ø–æ–ª—É—á–µ–Ω–æ': format_size(net_io.bytes_recv)
    }
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ GPU
    try:
        gpus = GPUtil.getGPUs()
        info['–≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞'] = [{
            '–º–æ–¥–µ–ª—å': gpu.name,
            '–Ω–∞–≥—Ä—É–∑–∫–∞': gpu.load * 100,
            '–ø–∞–º—è—Ç—å_–≤—Å–µ–≥–æ': format_size(gpu.memoryTotal),
            '–ø–∞–º—è—Ç—å_–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è': format_size(gpu.memoryUsed),
            '–ø–∞–º—è—Ç—å_—Å–≤–æ–±–æ–¥–Ω–æ': format_size(gpu.memoryFree)
        } for gpu in gpus]
    except:
        info['–≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞'] = None
    
    # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    info['—Å–∏—Å—Ç–µ–º–∞'] = {
        '–æ—Å': platform.system(),
        '–≤–µ—Ä—Å–∏—è_–æ—Å': platform.version(),
        '–∏–º—è_—Ö–æ—Å—Ç–∞': socket.gethostname(),
        'ip': socket.gethostbyname(socket.gethostname()),
        '–≤–µ—Ä—Å–∏—è_python': platform.python_version(),
        '–≤—Ä–µ–º—è_—Ä–∞–±–æ—Ç—ã_–±–æ—Ç–∞': format_time(time.time() - psutil.Process().create_time())
    }
    
    return info

def get_main_menu_keyboard():
    kb = InlineKeyboardBuilder()
    kb.button(text="üóÉ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", callback_data="dev_database")
    kb.button(text="üì® –°–æ–æ–±—â–µ–Ω–∏—è", callback_data="dev_messages")
    kb.button(text="üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏", callback_data="dev_developers")
    kb.button(text="üñ•Ô∏è –°–µ—Ä–≤–µ—Ä", callback_data="dev_server")
    kb.button(text="‚ö†Ô∏è –û—à–∏–±–∫–∏", callback_data="dev_errors")
    kb.button(text="‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ", callback_data="dev_advanced")
    kb.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="dev_stats")
    kb.button(text="üîß –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ", callback_data="dev_maintenance")
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")
    kb.adjust(2)
    return kb.as_markup()

def get_database_keyboard():
    kb = InlineKeyboardBuilder()
    kb.button(text="üì• –°–∫–∞—á–∞—Ç—å", callback_data="download_db")
    kb.button(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å", callback_data="reset_db")
    kb.button(text="üîº –ó–∞–≥—Ä—É–∑–∏—Ç—å", callback_data="upload_db")
    kb.button(text="‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å", callback_data="db_info")
    kb.button(text="üîç –ó–∞–ø—Ä–æ—Å", callback_data="sql_query")
    kb.button(text="üìä –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å", callback_data="optimize_db")
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="developer_panel")
    kb.adjust(2)
    return kb.as_markup()

def get_messages_keyboard():
    kb = InlineKeyboardBuilder()
    kb.button(text="üì® –†–∞—Å—Å—ã–ª–∫–∞", callback_data="broadcast_message")
    kb.button(text="üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data="send_announcement")
    kb.button(text="üì© –¢–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="test_message")
    kb.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="message_stats")
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="developer_panel")
    kb.adjust(2)
    return kb.as_markup()

def get_developers_keyboard():
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_developer")
    kb.button(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data="remove_developer")
    kb.button(text="üìã –°–ø–∏—Å–æ–∫", callback_data="list_developers")
    kb.button(text="üîë –ü—Ä–∞–≤–∞", callback_data="dev_permissions")
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="developer_panel")
    kb.adjust(2)
    return kb.as_markup()

def get_server_keyboard():
    kb = InlineKeyboardBuilder()
    kb.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="dev_server")
    kb.button(text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫", callback_data="restart_bot")
    kb.button(text="üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="stop_bot")
    kb.button(text="üìä –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="full_server_stats")
    kb.button(text="üåê –°–µ—Ç—å", callback_data="network_info")
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="developer_panel")
    kb.adjust(2)
    return kb.as_markup()

def get_errors_keyboard():
    kb = InlineKeyboardBuilder()
    kb.button(text="üìú –ü—Ä–æ—Å–º–æ—Ç—Ä", callback_data="view_logs")
    kb.button(text="üì• –°–∫–∞—á–∞—Ç—å", callback_data="download_logs")
    kb.button(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å", callback_data="clear_logs")
    kb.button(text="üîç –ü–æ–∏—Å–∫", callback_data="search_logs")
    kb.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="logs_stats")
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="developer_panel")
    kb.adjust(2)
    return kb.as_markup()

def get_advanced_keyboard():
    kb = InlineKeyboardBuilder()
    kb.button(text="üíæ –§–∞–π–ª—ã", callback_data="file_manager")
    kb.button(text="üõ†Ô∏è –ö–æ–º–∞–Ω–¥–∞", callback_data="run_command")
    kb.button(text="üìú –°–∫—Ä–∏–ø—Ç", callback_data="execute_script")
    kb.button(text="üåê –£–¥–∞–ª–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç", callback_data="remote_script")
    kb.button(text="üì° –í–µ–±—Ö—É–∫", callback_data="webhook_info")
    kb.button(text="üîê –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ", callback_data="env_vars")
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="developer_panel")
    kb.adjust(2)
    return kb.as_markup()

def get_maintenance_keyboard():
    kb = InlineKeyboardBuilder()
    kb.button(text="üßπ –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞", callback_data="clean_cache")
    kb.button(text="üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ", callback_data="update_bot")
    kb.button(text="üì¶ –ü–æ–ª–Ω—ã–π –±—ç–∫–∞–ø", callback_data="backup_all")
    kb.button(text="üõ†Ô∏è –†–µ–º–æ–Ω—Ç –ë–î", callback_data="repair_db")
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="developer_panel")
    kb.adjust(2)
    return kb.as_markup()

def get_confirmation_keyboard(confirm_data: str, cancel_data: str):
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=confirm_data)
    kb.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=cancel_data)
    return kb.as_markup()

@router.message(Command("developer_panel"))
async def developer_panel(message: Message):
    if not is_developer(message.from_user.id):
        await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    await message.answer(
        "üíª –ü–∞–Ω–µ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞",
        reply_markup=get_main_menu_keyboard()
    )

@router.callback_query(F.data == "developer_panel")
async def developer_panel_callback(callback: CallbackQuery):
    if not is_developer(callback.from_user.id):
        await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üíª –ü–∞–Ω–µ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞",
        reply_markup=get_main_menu_keyboard()
    )
    await callback.answer()

# –†–∞–∑–¥–µ–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
@router.callback_query(F.data == "dev_database")
async def dev_database(callback: CallbackQuery):
    await callback.message.edit_text(
        "üóÉ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö",
        reply_markup=get_database_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "download_db")
async def download_database(callback: CallbackQuery):
    try:
        backup_path = db.create_backup()
        file = FSInputFile(backup_path, filename=f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.db")
        await callback.message.answer_document(
            document=file,
            caption="üì¶ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ë–î: {e}")
        await callback.message.answer("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é")
    await callback.answer()

@router.callback_query(F.data == "reset_db")
async def reset_database_confirm(callback: CallbackQuery):
    await callback.message.edit_text(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å! –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!",
        reply_markup=get_confirmation_keyboard("confirm_reset_db", "dev_database")
    )
    await callback.answer()

@router.callback_query(F.data == "confirm_reset_db")
async def reset_database(callback: CallbackQuery):
    try:
        db.reset_database()
        await callback.message.edit_text("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ë–î: {e}")
        await callback.message.edit_text("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
    await callback.answer()

@router.callback_query(F.data == "upload_db")
async def upload_database_start(callback: CallbackQuery):
    await callback.message.edit_text(
        "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (.db):",
        reply_markup=InlineKeyboardBuilder().button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="dev_database").as_markup()
    )
    await callback.answer()

@router.message(F.document)
async def upload_database_process(message: Message):
    if not is_developer(message.from_user.id):
        return
    
    document = message.document
    if not document.file_name.endswith('.db'):
        await message.answer("üö´ –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .db!")
        return
    
    try:
        temp_path = os.path.join(config.DB_BACKUP_DIR, "temp_upload.db")
        await message.bot.download(document, destination=temp_path)
        
        try:
            test_conn = sqlite3.connect(temp_path)
            test_conn.close()
        except sqlite3.Error:
            os.remove(temp_path)
            await message.answer("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            return
        
        await message.answer("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö... –ë–æ—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
        shutil.move(temp_path, config.DB_NAME)
        python = sys.executable
        os.execl(python, python, *sys.argv)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ë–î: {e}")
        await message.answer("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")

@router.callback_query(F.data == "db_info")
async def database_info(callback: CallbackQuery):
    try:
        db_size = os.path.getsize(config.DB_NAME)
        db_created = datetime.fromtimestamp(os.path.getctime(config.DB_NAME)).strftime('%Y-%m-%d %H:%M:%S')
        db_modified = datetime.fromtimestamp(os.path.getmtime(config.DB_NAME)).strftime('%Y-%m-%d %H:%M:%S')
        
        stats = db.get_user_stats()
        
        text = "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:\n\n"
        text += f"üìä –†–∞–∑–º–µ—Ä: {format_size(db_size)}\n"
        text += f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {db_created}\n"
        text += f"üîÑ –ò–∑–º–µ–Ω–µ–Ω–∞: {db_modified}\n"
        text += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {stats['total_users']} (–ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_users']})\n"
        text += f"üîó –°—Å—ã–ª–∫–∏: {stats['total_links']} (–ü–µ—Ä–µ—Ö–æ–¥–æ–≤: {stats['total_link_visits']})\n"
        text += f"üìù –õ–æ–≥–∏: {db.count_logs()}\n"
        text += f"üìÇ –ü—É—Ç—å: {os.path.abspath(config.DB_NAME)}"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_database_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ë–î: {e}")
        await callback.message.edit_text(
            "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
            reply_markup=get_database_keyboard()
        )
    await callback.answer()

@router.callback_query(F.data == "sql_query")
async def sql_query_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(DeveloperStates.waiting_for_sql_query)
    await callback.message.edit_text(
        "üîç –í–≤–µ–¥–∏—Ç–µ SQL –∑–∞–ø—Ä–æ—Å (—Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è):",
        reply_markup=InlineKeyboardBuilder().button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="dev_database").as_markup()
    )
    await callback.answer()

@router.message(DeveloperStates.waiting_for_sql_query)
async def sql_query_execute(message: Message, state: FSMContext):
    query = message.text.strip()
    
    # –ó–∞—â–∏—Ç–∞ –æ—Ç –æ–ø–∞—Å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    if any(word in query.upper() for word in ["INSERT", "UPDATE", "DELETE", "DROP", "ALTER", "CREATE"]):
        await message.answer("üö´ –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ SELECT –∑–∞–ø—Ä–æ—Å—ã!")
        await state.clear()
        return
    
    try:
        with db._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute(query)
            
            results = cursor.fetchall()
            if not results:
                await message.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç.")
                return
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            columns = [description[0] for description in cursor.description]
            formatted = "\n".join([f"{col}: {row[i]}" for row in results[:5] for i, col in enumerate(columns)])
            
            if len(results) > 5:
                formatted += f"\n\n...–∏ –µ—â–µ {len(results)-5} —Å—Ç—Ä–æ–∫"
            
            await message.answer(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–∞ (–ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫):\n\n<code>{formatted}</code>", parse_mode="HTML")
    
    except Exception as e:
        await message.answer(f"üö´ –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
    
    await state.clear()

@router.callback_query(F.data == "optimize_db")
async def optimize_database(callback: CallbackQuery):
    try:
        with db._get_connection() as conn:
            conn.execute("VACUUM")
            conn.execute("ANALYZE")
            conn.commit()
        
        await callback.message.edit_text("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        await callback.message.edit_text("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
    await callback.answer()

# –†–∞–∑–¥–µ–ª —Å–æ–æ–±—â–µ–Ω–∏–π
@router.callback_query(F.data == "dev_messages")
async def dev_messages(callback: CallbackQuery):
    await callback.message.edit_text(
        "üì® –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏",
        reply_markup=get_messages_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "broadcast_message")
async def broadcast_message_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(DeveloperStates.waiting_for_broadcast)
    await callback.message.edit_text(
        "üì® –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
        reply_markup=InlineKeyboardBuilder().button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="dev_messages").as_markup()
    )
    await callback.answer()

@router.message(DeveloperStates.waiting_for_broadcast)
async def broadcast_message_process(message: Message, state: FSMContext):
    users = db.get_all_users()
    total = len(users)
    success = 0
    failed = 0
    
    progress_msg = await message.answer(f"‚è≥ –†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è {total} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    for user in users:
        try:
            await message.bot.send_message(
                chat_id=user['user_id'],
                text=message.text
            )
            success += 1
            
            if success % 10 == 0:
                await progress_msg.edit_text(
                    f"‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å: {success + failed}/{total}\n"
                    f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n"
                    f"üö´ –û—à–∏–±–∫–∏: {failed}"
                )
            
            await asyncio.sleep(0.1)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['user_id']}: {e}")
            failed += 1
    
    db.add_system_message(message.text, message.from_user.id, success)
    
    await progress_msg.edit_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üì§ –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {total}\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n"
        f"üö´ –û—à–∏–±–∫–∏: {failed}"
    )
    await state.clear()

@router.callback_query(F.data == "send_announcement")
async def send_announcement_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(DeveloperStates.waiting_for_announcement)
    await callback.message.edit_text(
        "üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–±—É–¥–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ –≤ —á–∞—Ç–∞—Ö/–∫–∞–Ω–∞–ª–∞—Ö):",
        reply_markup=InlineKeyboardBuilder().button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="dev_messages").as_markup()
    )
    await callback.answer()

@router.message(DeveloperStates.waiting_for_announcement)
async def send_announcement_process(message: Message, state: FSMContext):
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª—ã
    await message.answer("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ (–Ω—É–∂–Ω–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤)")
    await state.clear()

@router.callback_query(F.data == "test_message")
async def test_message(callback: CallbackQuery):
    try:
        await callback.bot.send_message(
            chat_id=callback.from_user.id,
            text="üì© –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–∞–Ω–µ–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞"
        )
        await callback.answer("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await callback.answer("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

@router.callback_query(F.data == "message_stats")
async def message_stats(callback: CallbackQuery):
    stats = db.get_user_stats()
    messages = db.get_all_system_messages()
    
    text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π:\n\n"
    text += f"üì® –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats.get('total_messages', 0)}\n"
    text += f"üì§ –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏: {stats.get('last_broadcast_recipients', 0)}\n"
    
    if messages:
        last_msg = messages[0]
        text += f"\nüìù –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n"
        text += f"–î–∞—Ç–∞: {last_msg['sent_date']}\n"
        text += f"–ü–æ–ª—É—á–∞—Ç–µ–ª–∏: {last_msg['recipients_count']}\n"
        text += f"–¢–µ–∫—Å—Ç: {last_msg['message_text'][:100]}..."
    
    await callback.message.edit_text(text, reply_markup=get_messages_keyboard())
    await callback.answer()

# –†–∞–∑–¥–µ–ª —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
@router.callback_query(F.data == "dev_developers")
async def dev_developers(callback: CallbackQuery):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        developers = config.DEVELOPER_IDS
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ
        if config.ADMIN_ID not in developers:
            developers.append(config.ADMIN_ID)
        
        text = "üë®‚Äçüíª –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤:\n\n"
        
        for i, dev_id in enumerate(developers, 1):
            user = db.get_user(dev_id)
            if user:
                username = f"@{user['username']}" if user.get('username') else "–Ω–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞"
                text += f"{i}. ID: {dev_id} | –Æ–∑–µ—Ä–Ω–µ–π–º: {username}\n"
            else:
                text += f"{i}. ID: {dev_id} | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î\n"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_developers_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
        await callback.message.edit_text(
            "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤",
            reply_markup=get_developers_keyboard()
        )
    await callback.answer()

@router.callback_query(F.data == "add_developer")
async def add_developer_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(DeveloperStates.waiting_for_developer_id)
    await callback.message.edit_text(
        "üë®‚Äçüíª –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏:",
        reply_markup=InlineKeyboardBuilder().button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="dev_developers").as_markup()
    )
    await callback.answer()

@router.message(DeveloperStates.waiting_for_developer_id)
async def add_developer_process(message: Message, state: FSMContext):
    try:
        user_id = int(message.text)
        user = db.get_user(user_id)
        
        if not user:
            await message.answer("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            await state.clear()
            return
            
        if user_id in config.DEVELOPER_IDS:
            await message.answer("‚ÑπÔ∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫")
            await state.clear()
            return
            
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥/–ë–î
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥)")
        
    except ValueError:
        await message.answer("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    await state.clear()

@router.callback_query(F.data == "remove_developer")
async def remove_developer_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(DeveloperStates.waiting_for_developer_id)
    await callback.message.edit_text(
        "üë®‚Äçüíª –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤:",
        reply_markup=InlineKeyboardBuilder().button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="dev_developers").as_markup()
    )
    await callback.answer()

@router.message(DeveloperStates.waiting_for_developer_id)
async def remove_developer_process(message: Message, state: FSMContext):
    try:
        user_id = int(message.text)
        
        if user_id == config.ADMIN_ID:
            await message.answer("üö´ –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞!")
            await state.clear()
            return
            
        if user_id not in config.DEVELOPER_IDS:
            await message.answer("‚ÑπÔ∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫")
            await state.clear()
            return
            
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥/–ë–î
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (–Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥)")
        
    except ValueError:
        await message.answer("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    await state.clear()

@router.callback_query(F.data == "dev_permissions")
async def dev_permissions(callback: CallbackQuery):
    text = "üîë –ü—Ä–∞–≤–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤:\n\n"
    text += "‚Ä¢ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞\n"
    text += "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö\n"
    text += "‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å —Å–µ—Ä–≤–µ—Ä–∞\n"
    text += "‚Ä¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
    text += "‚Ä¢ –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã\n"
    
    await callback.message.edit_text(text, reply_markup=get_developers_keyboard())
    await callback.answer()

# –†–∞–∑–¥–µ–ª —Å–µ—Ä–≤–µ—Ä–∞
@router.callback_query(F.data == "dev_server")
async def dev_server(callback: CallbackQuery):
    try:
        info = get_system_info()
        
        text = "üñ•Ô∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞:\n\n"
        text += f"‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {info['—Å–∏—Å—Ç–µ–º–∞']['–≤—Ä–µ–º—è_—Ä–∞–±–æ—Ç—ã_–±–æ—Ç–∞']}\n"
        text += f"üñ• CPU: {info['cpu']['–º–æ–¥–µ–ª—å']} ({info['cpu']['—è–¥—Ä–∞']} —è–¥–µ—Ä, {info['cpu']['–Ω–∞–≥—Ä—É–∑–∫–∞']}%)\n"
        text += f"üß† RAM: {info['–ø–∞–º—è—Ç—å']['–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è']}/{info['–ø–∞–º—è—Ç—å']['–≤—Å–µ–≥–æ']} ({info['–ø–∞–º—è—Ç—å']['–ø—Ä–æ—Ü–µ–Ω—Ç']}%)\n"
        text += f"üíæ –î–∏—Å–∫: {info['–¥–∏—Å–∫']['–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è']}/{info['–¥–∏—Å–∫']['–≤—Å–µ–≥–æ']} ({info['–¥–∏—Å–∫']['–ø—Ä–æ—Ü–µ–Ω—Ç']}%)\n"
        
        if info['–≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞']:
            text += f"üéÆ GPU: {info['–≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞'][0]['–º–æ–¥–µ–ª—å']} ({info['–≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞'][0]['–Ω–∞–≥—Ä—É–∑–∫–∞']:.1f}%)\n"
        
        text += f"üåê –°–µ—Ç—å: ‚Üë{info['—Å–µ—Ç—å']['–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ']} ‚Üì{info['—Å–µ—Ç—å']['–ø–æ–ª—É—á–µ–Ω–æ']}"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_server_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        await callback.message.edit_text(
            "üö´ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞!",
            reply_markup=get_server_keyboard()
        )
    await callback.answer()

@router.callback_query(F.data == "full_server_stats")
async def full_server_stats(callback: CallbackQuery):
    try:
        info = get_system_info()
        
        text = "üìä –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:\n\n"
        text += f"üíª –ò–º—è —Å–µ—Ä–≤–µ—Ä–∞: {info['—Å–∏—Å—Ç–µ–º–∞']['–∏–º—è_—Ö–æ—Å—Ç–∞']}\n"
        text += f"üñ• –û–°: {info['—Å–∏—Å—Ç–µ–º–∞']['–æ—Å']} {info['—Å–∏—Å—Ç–µ–º–∞']['–≤–µ—Ä—Å–∏—è_–æ—Å']}\n"
        text += f"üêç Python: {info['—Å–∏—Å—Ç–µ–º–∞']['–≤–µ—Ä—Å–∏—è_python']}\n"
        text += f"‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {info['—Å–∏—Å—Ç–µ–º–∞']['–≤—Ä–µ–º—è_—Ä–∞–±–æ—Ç—ã_–±–æ—Ç–∞']}\n\n"
        
        text += "üñ• –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ CPU:\n"
        text += f"‚Ä¢ –ú–æ–¥–µ–ª—å: {info['cpu']['–º–æ–¥–µ–ª—å']}\n"
        text += f"‚Ä¢ –Ø–¥—Ä–∞: {info['cpu']['—è–¥—Ä–∞']} —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö, {info['cpu']['–ø–æ—Ç–æ–∫–∏']} –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö\n"
        text += f"‚Ä¢ –ù–∞–≥—Ä—É–∑–∫–∞: {info['cpu']['–Ω–∞–≥—Ä—É–∑–∫–∞']}%\n\n"
        
        text += "üß† –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø–∞–º—è—Ç–∏:\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ: {info['–ø–∞–º—è—Ç—å']['–≤—Å–µ–≥–æ']}\n"
        text += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {info['–ø–∞–º—è—Ç—å']['–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è']} ({info['–ø–∞–º—è—Ç—å']['–ø—Ä–æ—Ü–µ–Ω—Ç']}%)\n"
        text += f"‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ: {info['–ø–∞–º—è—Ç—å']['–¥–æ—Å—Ç—É–ø–Ω–æ']}\n\n"
        
        if info['–≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞']:
            text += "üéÆ –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–µ:\n"
            for gpu in info['–≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞']:
                text += f"‚Ä¢ {gpu['–º–æ–¥–µ–ª—å']}: {gpu['–Ω–∞–≥—Ä—É–∑–∫–∞']:.1f}% –Ω–∞–≥—Ä—É–∑–∫–∏\n"
                text += f"  –ü–∞–º—è—Ç—å: {gpu['–ø–∞–º—è—Ç—å_–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è']}/{gpu['–ø–∞–º—è—Ç—å_–≤—Å–µ–≥–æ']}\n"
        
        await callback.message.answer(text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        await callback.answer("üö´ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!")
    await callback.answer()

@router.callback_query(F.data == "network_info")
async def network_info(callback: CallbackQuery):
    try:
        info = get_system_info()
        net_io = psutil.net_io_counters()
        net_if = psutil.net_if_addrs()
        
        text = "üåê –°–µ—Ç–µ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n"
        text += f"üñ• –ò–º—è —Å–µ—Ä–≤–µ—Ä–∞: {info['—Å–∏—Å—Ç–µ–º–∞']['–∏–º—è_—Ö–æ—Å—Ç–∞']}\n"
        text += f"üì° IP: {info['—Å–∏—Å—Ç–µ–º–∞']['ip']}\n\n"
        text += "üìä –¢—Ä–∞—Ñ–∏–∫:\n"
        text += f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {info['—Å–µ—Ç—å']['–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ']}\n"
        text += f"‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ: {info['—Å–µ—Ç—å']['–ø–æ–ª—É—á–µ–Ω–æ']}\n\n"
        text += "üîå –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:\n"
        
        for interface, addrs in net_if.items():
            text += f"‚Ä¢ {interface}:\n"
            for addr in addrs:
                text += f"  - {addr.family.name}: {addr.address}\n"
        
        await callback.message.answer(text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        await callback.answer("üö´ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!")
    await callback.answer()

@router.callback_query(F.data == "restart_bot")
async def restart_bot_confirm(callback: CallbackQuery):
    await callback.message.edit_text(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞?",
        reply_markup=get_confirmation_keyboard("confirm_restart_bot", "dev_server")
    )
    await callback.answer()

@router.callback_query(F.data == "confirm_restart_bot")
async def restart_bot(callback: CallbackQuery):
    await callback.message.edit_text("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
    await callback.answer()
    python = sys.executable
    os.execl(python, python, *sys.argv)

@router.callback_query(F.data == "stop_bot")
async def stop_bot_confirm(callback: CallbackQuery):
    await callback.message.edit_text(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞?\n"
        "–ë–æ—Ç –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –¥–æ —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞!",
        reply_markup=get_confirmation_keyboard("confirm_stop_bot", "dev_server")
    )
    await callback.answer()

@router.callback_query(F.data == "confirm_stop_bot")
async def stop_bot(callback: CallbackQuery):
    await callback.message.edit_text("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    await callback.answer()
    os._exit(0)

# –†–∞–∑–¥–µ–ª –æ—à–∏–±–æ–∫
@router.callback_query(F.data == "dev_errors")
async def dev_errors(callback: CallbackQuery):
    try:
        log_stats = {
            'total': db.count_logs(),
            'critical': db.count_logs('CRITICAL'),
            'error': db.count_logs('ERROR'),
            'warning': db.count_logs('WARNING'),
            'info': db.count_logs('INFO'),
            'debug': db.count_logs('DEBUG')
        }
        
        log_size = os.path.getsize(config.LOGS_FILE) if os.path.exists(config.LOGS_FILE) else 0
        
        text = "‚ö†Ô∏è –õ–æ–≥–∏ –æ—à–∏–±–æ–∫:\n\n"
        text += f"üìä –í—Å–µ–≥–æ: {log_stats['total']}\n"
        text += f"üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ: {log_stats['critical']}\n"
        text += f"üü† –û—à–∏–±–∫–∏: {log_stats['error']}\n"
        text += f"üü° –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {log_stats['warning']}\n"
        text += f"üü¢ –ò–Ω—Ñ–æ: {log_stats['info']}\n"
        text += f"üîµ –û—Ç–ª–∞–¥–∫–∞: {log_stats['debug']}\n"
        text += f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {format_size(log_size)}"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_errors_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–≥–∞—Ö: {e}")
        await callback.message.edit_text(
            "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–≥–∞—Ö!",
            reply_markup=get_errors_keyboard()
        )
    await callback.answer()

@router.callback_query(F.data == "view_logs")
async def view_logs(callback: CallbackQuery):
    try:
        if not os.path.exists(config.LOGS_FILE):
            await callback.message.edit_text(
                "–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω!",
                reply_markup=get_errors_keyboard()
            )
            return
        
        with open(config.LOGS_FILE, 'r', encoding='utf-8') as f:
            logs = f.read()
        
        if len(logs) > 4000:
            logs = logs[-4000:]
        
        await callback.message.edit_text(
            f"üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:\n\n<code>{logs}</code>",
            reply_markup=get_errors_keyboard(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
        await callback.message.edit_text(
            "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–æ–≥–∏!",
            reply_markup=get_errors_keyboard()
        )
    await callback.answer()

@router.callback_query(F.data == "download_logs")
async def download_logs(callback: CallbackQuery):
    try:
        if not os.path.exists(config.LOGS_FILE):
            await callback.answer("–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return
        
        file = FSInputFile(config.LOGS_FILE, filename="bot_logs.log")
        await callback.message.answer_document(
            document=file,
            caption="üìú –õ–æ–≥–∏ –±–æ—Ç–∞"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤: {e}")
        await callback.message.answer("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥–∏")
    await callback.answer()

@router.callback_query(F.data == "clear_logs")
async def clear_logs_confirm(callback: CallbackQuery):
    await callback.message.edit_text(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ª–æ–≥–∏?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å! –í—Å–µ –ª–æ–≥–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!",
        reply_markup=get_confirmation_keyboard("confirm_clear_logs", "dev_errors")
    )
    await callback.answer()

@router.callback_query(F.data == "confirm_clear_logs")
async def clear_logs(callback: CallbackQuery):
    try:
        db.clear_logs()
        if os.path.exists(config.LOGS_FILE):
            with open(config.LOGS_FILE, 'w'):
                pass
        
        await callback.message.edit_text("‚úÖ –õ–æ–≥–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤: {e}")
        await callback.message.edit_text("üö´ –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤!")
    await callback.answer()

@router.callback_query(F.data == "search_logs")
async def search_logs_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(DeveloperStates.waiting_for_log_search)
    await callback.message.edit_text(
        "üîç –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –ª–æ–≥–∞—Ö:",
        reply_markup=InlineKeyboardBuilder().button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="dev_errors").as_markup()
    )
    await callback.answer()

@router.message(DeveloperStates.waiting_for_log_search)
async def search_logs_process(message: Message, state: FSMContext):
    term = message.text.strip()
    
    try:
        logs = db.get_logs_by_search(term)
        
        if not logs:
            await message.answer("üîç –õ–æ–≥–æ–≤ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            await state.clear()
            return
            
        formatted = "\n".join([
            f"{log['timestamp']} [{log['level']}]: {log['message'][:100]}"
            for log in logs[:5]
        ])
        
        if len(logs) > 5:
            formatted += f"\n\n...–∏ –µ—â–µ {len(logs)-5} –∑–∞–ø–∏—Å–µ–π"
        
        await message.answer(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n\n<code>{formatted}</code>", parse_mode="HTML")
        
    except Exception as e:
        await message.answer(f"üö´ –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}")
    
    await state.clear()

@router.callback_query(F.data == "logs_stats")
async def logs_stats(callback: CallbackQuery):
    try:
        stats = {
            'total': db.count_logs(),
            'last_hour': db.count_logs_since(datetime.now() - timedelta(hours=1)),
            'last_day': db.count_logs_since(datetime.now() - timedelta(days=1)),
            'last_week': db.count_logs_since(datetime.now() - timedelta(weeks=1)),
        }
        
        text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥–æ–≤:\n\n"
        text += f"üìà –í—Å–µ–≥–æ –ª–æ–≥–æ–≤: {stats['total']}\n"
        text += f"‚è± –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å: {stats['last_hour']}\n"
        text += f"üìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞: {stats['last_day']}\n"
        text += f"üóì –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é: {stats['last_week']}\n"
        
        await callback.message.edit_text(text, reply_markup=get_errors_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–æ–≥–æ–≤: {e}")
        await callback.answer("üö´ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–æ–≥–æ–≤!")
    await callback.answer()

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
@router.callback_query(F.data == "dev_advanced")
async def dev_advanced(callback: CallbackQuery):
    await callback.message.edit_text(
        "‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
        reply_markup=get_advanced_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "file_manager")
async def file_manager(callback: CallbackQuery):
    try:
        files = os.listdir('.')
        text = "üìÅ –§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä (—Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è):\n\n"
        
        for i, file in enumerate(files[:10], 1):
            size = os.path.getsize(file)
            text += f"{i}. {file} ({format_size(size)})\n"
        
        if len(files) > 10:
            text += f"\n...–∏ –µ—â–µ {len(files)-10} —Ñ–∞–π–ª–æ–≤"
        
        await callback.message.edit_text(text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
        await callback.answer("üö´ –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º!")
    await callback.answer()

@router.callback_query(F.data == "run_command")
async def run_command_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(DeveloperStates.waiting_for_command)
    await callback.message.edit_text(
        "‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã):",
        reply_markup=InlineKeyboardBuilder().button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="dev_advanced").as_markup()
    )
    await callback.answer()

@router.message(DeveloperStates.waiting_for_command)
async def run_command_process(message: Message, state: FSMContext):
    cmd = message.text.strip()
    
    # –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    ALLOWED_COMMANDS = ['ls', 'pwd', 'df', 'free', 'uptime', 'date', 'whoami']
    
    if not any(cmd.startswith(allowed) for allowed in ALLOWED_COMMANDS):
        await message.answer("üö´ –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –∏–∑ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!")
        await state.clear()
        return
    
    try:
        result = subprocess.run(
            cmd, 
            shell=True, 
            capture_output=True, 
            text=True,
            timeout=10
        )
        
        output = result.stdout or result.stderr or "–ù–µ—Ç –≤—ã–≤–æ–¥–∞"
        
        if len(output) > 4000:
            output = output[:2000] + "\n...\n" + output[-2000:]
        
        await message.answer(f"‚å®Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–º–∞–Ω–¥—ã:\n\n<code>{output}</code>", parse_mode="HTML")
    except Exception as e:
        await message.answer(f"üö´ –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {str(e)}")
    
    await state.clear()

@router.callback_query(F.data == "execute_script")
async def execute_script_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(DeveloperStates.waiting_for_script)
    await callback.message.edit_text(
        "üìú –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª Python —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–º–∞–∫—Å. 10–ö–ë):",
        reply_markup=InlineKeyboardBuilder().button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="dev_advanced").as_markup()
    )
    await callback.answer()

@router.message(DeveloperStates.waiting_for_script, F.document)
async def execute_script_process(message: Message, state: FSMContext):
    if not message.document.file_name.endswith('.py'):
        await message.answer("üö´ –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã .py!")
        await state.clear()
        return
    
    if message.document.file_size > 10 * 1024:  # –õ–∏–º–∏—Ç 10–ö–ë
        await message.answer("üö´ –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å. 10–ö–ë)!")
        await state.clear()
        return
    
    try:
        temp_path = f"temp_{uuid.uuid4().hex}.py"
        await message.bot.download(message.document, destination=temp_path)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        with open(temp_path, 'r') as f:
            content = f.read()
            if any(banned in content for banned in ['import os', 'import sys', 'subprocess']):
                os.remove(temp_path)
                await message.answer("üö´ –°–∫—Ä–∏–ø—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã!")
                await state.clear()
                return
        
        result = subprocess.run(
            [sys.executable, temp_path],
            capture_output=True,
            text=True,
            timeout=30
        )
        
        output = result.stdout or result.stderr or "–ù–µ—Ç –≤—ã–≤–æ–¥–∞"
        
        if len(output) > 4000:
            output = output[:2000] + "\n...\n" + output[-2000:]
        
        await message.answer(f"üìú –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞:\n\n<code>{output}</code>", parse_mode="HTML")
        
        os.remove(temp_path)
    except Exception as e:
        await message.answer(f"üö´ –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞: {str(e)}")
        if os.path.exists(temp_path):
            os.remove(temp_path)
    
    await state.clear()

@router.callback_query(F.data == "remote_script")
async def remote_script_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(DeveloperStates.waiting_for_script)
    await callback.message.edit_text(
        "üåê –í–≤–µ–¥–∏—Ç–µ URL —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ (—Ç–æ–ª—å–∫–æ –∏–∑ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤):",
        reply_markup=InlineKeyboardBuilder().button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="dev_advanced").as_markup()
    )
    await callback.answer()

@router.message(DeveloperStates.waiting_for_script)
async def remote_script_process(message: Message, state: FSMContext):
    url = message.text.strip()
    
    if not url.startswith(('http://', 'https://')):
        await message.answer("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL!")
        await state.clear()
        return
    
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        
        if len(response.content) > 10 * 1024:  # –õ–∏–º–∏—Ç 10–ö–ë
            await message.answer("üö´ –°–∫—Ä–∏–ø—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å. 10–ö–ë)!")
            await state.clear()
            return
            
        temp_path = f"temp_{uuid.uuid4().hex}.py"
        with open(temp_path, 'w') as f:
            f.write(response.text)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if any(banned in response.text for banned in ['import os', 'import sys', 'subprocess']):
            os.remove(temp_path)
            await message.answer("üö´ –°–∫—Ä–∏–ø—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã!")
            await state.clear()
            return
        
        result = subprocess.run(
            [sys.executable, temp_path],
            capture_output=True,
            text=True,
            timeout=30
        )
        
        output = result.stdout or result.stderr or "–ù–µ—Ç –≤—ã–≤–æ–¥–∞"
        
        if len(output) > 4000:
            output = output[:2000] + "\n...\n" + output[-2000:]
        
        await message.answer(f"üåê –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞:\n\n<code>{output}</code>", parse_mode="HTML")
        
        os.remove(temp_path)
    except Exception as e:
        await message.answer(f"üö´ –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞: {str(e)}")
        if os.path.exists(temp_path):
            os.remove(temp_path)
    
    await state.clear()

@router.callback_query(F.data == "webhook_info")
async def webhook_info(callback: CallbackQuery):
    try:
        webhook_info = await callback.bot.get_webhook_info()
        
        text = "üì° –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ–±—Ö—É–∫–µ:\n\n"
        text += f"üîó URL: {webhook_info.url or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
        text += f"üîÑ –û–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {webhook_info.pending_update_count}\n"
        text += f"‚è± –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {webhook_info.last_error_date or '–ù–∏–∫–æ–≥–¥–∞'}\n"
        text += f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏: {webhook_info.last_error_message or '–ù–µ—Ç'}"
        
        await callback.message.edit_text(text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ–±—Ö—É–∫–µ: {e}")
        await callback.answer("üö´ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ–±—Ö—É–∫–µ!")
    await callback.answer()

@router.callback_query(F.data == "env_vars")
async def env_vars(callback: CallbackQuery):
    try:
        env_vars = {
            'BOT_TOKEN': '***' + config.BOT_TOKEN[-3:] if config.BOT_TOKEN else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
            'ADMIN_ID': config.ADMIN_ID,
            'DEVELOPER_IDS': config.DEVELOPER_IDS,
            'DB_NAME': config.DB_NAME,
            'LOGS_DIR': config.LOGS_DIR
        }
        
        text = "üîê –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:\n\n"
        for key, value in env_vars.items():
            text += f"{key}: {value}\n"
        
        await callback.message.edit_text(text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
        await callback.answer("üö´ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    await callback.answer()

# –†–∞–∑–¥–µ–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@router.callback_query(F.data == "dev_stats")
async def dev_stats(callback: CallbackQuery):
    try:
        stats = db.get_user_stats()
        
        text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
        text += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {stats['total_users']} (–ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_users']})\n"
        text += f"üîó –°—Å—ã–ª–∫–∏: {stats['total_links']} (–ü–µ—Ä–µ—Ö–æ–¥–æ–≤: {stats['total_link_visits']})\n"
        text += f"üìù –ñ–∞–ª–æ–±—ã: {stats['total_reports']} (–û—Ç–∫—Ä—ã—Ç—ã—Ö: {stats['open_reports']})\n"
        text += f"üì¢ –ö–∞–Ω–∞–ª—ã: {stats['subscription_channels']}\n"
        text += f"üì® –°–æ–æ–±—â–µ–Ω–∏—è: {stats.get('total_messages', 0)}\n"
        text += f"üìú –õ–æ–≥–∏: {db.count_logs()}"
        
        await callback.message.edit_text(text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.answer("üö´ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!")
    await callback.answer()

# –†–∞–∑–¥–µ–ª –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
@router.callback_query(F.data == "dev_maintenance")
async def dev_maintenance(callback: CallbackQuery):
    await callback.message.edit_text(
        "üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è",
        reply_markup=get_maintenance_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "clean_cache")
async def clean_cache(callback: CallbackQuery):
    try:
        # –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ Python
        for root, dirs, files in os.walk('.'):
            for dir in dirs:
                if dir == '__pycache__':
                    shutil.rmtree(os.path.join(root, dir))
        
        await callback.message.edit_text("‚úÖ –ö–µ—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞: {e}")
        await callback.message.edit_text("üö´ –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞!")
    await callback.answer()

@router.callback_query(F.data == "update_bot")
async def update_bot_confirm(callback: CallbackQuery):
    await callback.message.edit_text(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞?\n"
        "–≠—Ç–æ –∑–∞–≥—Ä—É–∑–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ Git –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç –±–æ—Ç–∞.",
        reply_markup=get_confirmation_keyboard("confirm_update_bot", "dev_maintenance")
    )
    await callback.answer()

@router.callback_query(F.data == "confirm_update_bot")
async def update_bot(callback: CallbackQuery):
    try:
        result = subprocess.run(
            ['git', 'pull'],
            capture_output=True,
            text=True
        )
        
        output = result.stdout or result.stderr or "–ù–µ—Ç –≤—ã–≤–æ–¥–∞"
        
        if len(output) > 4000:
            output = output[:2000] + "\n...\n" + output[-2000:]
        
        await callback.message.edit_text(
            f"üîÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n\n<code>{output}</code>\n\n–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...",
            parse_mode="HTML"
        )
        
        python = sys.executable
        os.execl(python, python, *sys.argv)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        await callback.message.edit_text(f"üö´ –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")
    await callback.answer()

@router.callback_query(F.data == "backup_all")
async def backup_all(callback: CallbackQuery):
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –±—ç–∫–∞–ø–∞
        backup_dir = f"backups/full_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        os.makedirs(backup_dir, exist_ok=True)
        
        # –ë—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_backup_path = db.create_backup()
        shutil.move(db_backup_path, os.path.join(backup_dir, os.path.basename(db_backup_path)))
        
        # –ë—ç–∫–∞–ø –ª–æ–≥–æ–≤
        if os.path.exists(config.LOGS_FILE):
            shutil.copy(config.LOGS_FILE, backup_dir)
        
        # –ë—ç–∫–∞–ø –∫–æ–Ω—Ñ–∏–≥–∞
        if os.path.exists('.env'):
            shutil.copy('.env', backup_dir)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ zip-–∞—Ä—Ö–∏–≤–∞
        shutil.make_archive(backup_dir, 'zip', backup_dir)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –±—ç–∫–∞–ø–∞
        file = FSInputFile(f"{backup_dir}.zip", filename=f"full_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.zip")
        await callback.message.answer_document(
            document=file,
            caption="üì¶ –ü–æ–ª–Ω—ã–π –±—ç–∫–∞–ø"
        )
        
        # –û—á–∏—Å—Ç–∫–∞
        shutil.rmtree(backup_dir)
        os.remove(f"{backup_dir}.zip")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±—ç–∫–∞–ø–∞: {e}")
        await callback.message.answer("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø!")
    await callback.answer()

@router.callback_query(F.data == "repair_db")
async def repair_db(callback: CallbackQuery):
    try:
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
        backup_path = db.create_backup()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
        with db._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("PRAGMA integrity_check")
            result = cursor.fetchone()
            
            if result and result[0] == 'ok':
                await callback.message.edit_text("‚úÖ –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ - –æ—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            else:
                # –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                cursor.execute("REINDEX")
                cursor.execute("VACUUM")
                conn.commit()
                await callback.message.edit_text("üõ†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î: {e}")
        await callback.message.edit_text("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
    await callback.answer()

developer_router = router