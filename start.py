# handlers/start.py
from aiogram import Router, types, F, Bot
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from database import Database
from config import config
import logging
from typing import List, Dict, Any

router = Router()
db = Database()
logger = logging.getLogger(__name__)

def get_subscription_check_keyboard(channels: List[Dict[str, Any]]) -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    builder = InlineKeyboardBuilder()
    
    for channel in channels:
        username = channel.get('username')
        if username:
            builder.button(
                text=f"üì¢ {channel['title']}", 
                url=f"https://t.me/{username}"
            )
    
    builder.button(
        text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è",
        callback_data="check_subscription"
    )
    
    builder.adjust(1)
    return builder.as_markup()

@router.callback_query(F.data == "check_subscription")
async def check_subscription(callback: CallbackQuery, bot: Bot):
    await callback.answer()
    
    # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    required_channels = db.get_all_subscription_channels()
    not_subscribed = []
    
    for channel in required_channels:
        try:
            chat_member = await bot.get_chat_member(
                chat_id=channel['channel_id'],
                user_id=callback.from_user.id
            )
            if chat_member.status in ['left', 'kicked']:
                not_subscribed.append(channel)
        except Exception as e:
            logger.error(f"Error checking subscription: {e}")
            continue
            
    if not_subscribed:
        channels_text = "\n".join(
            f"- {channel['title']} (@{channel.get('username', '–Ω–µ—Ç')})"
            for channel in not_subscribed
        )
        await callback.message.edit_text(
            f"‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã:\n\n{channels_text}",
            reply_markup=get_subscription_check_keyboard(not_subscribed)
        )
    else:
        await callback.message.edit_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º."
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await send_welcome_message(callback.message, callback.from_user)

@router.message(CommandStart())
async def handle_start(message: Message, bot: Bot):
    args = message.text.split()[1] if len(message.text.split()) > 1 else None
    
    # Register user
    db.add_user(
        user_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    required_channels = db.get_all_subscription_channels()
    if required_channels:
        not_subscribed = []
        
        for channel in required_channels:
            try:
                chat_member = await bot.get_chat_member(
                    chat_id=channel['channel_id'],
                    user_id=message.from_user.id
                )
                if chat_member.status in ['left', 'kicked']:
                    not_subscribed.append(channel)
            except Exception as e:
                logger.error(f"Error checking subscription: {e}")
                continue
                
        if not_subscribed:
            channels_text = "\n".join(
                f"- {channel['title']} (@{channel.get('username', '–Ω–µ—Ç')})"
                for channel in not_subscribed
            )
            await message.answer(
                f"üì¢ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã:\n\n{channels_text}",
                reply_markup=get_subscription_check_keyboard(not_subscribed)
            )
            return
    
    # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    await process_start_command(message, args)

async def process_start_command(message: Message, args: str = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    if args:
        # Handle link code
        link = db.get_link(args)
        if link:
            db.increment_link_visits(args)
            db.increment_link_visits(message.from_user.id)
            
            if link['content_type'] == 'text':
                await message.answer(link['content_text'])
            elif link['content_type'] == 'photo':
                await message.answer_photo(link['content_file_id'], caption=link.get('content_text'))
            elif link['content_type'] == 'document':
                await message.answer_document(link['content_file_id'], caption=link.get('content_text'))
            return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await send_welcome_message(message, message.from_user)

async def send_welcome_message(message: Message, user: types.User):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    is_admin = db.is_admin(user.id)
    welcome_text = f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
    welcome_text += "–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–¥–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç—ã –ø–æ —Å—Å—ã–ª–∫–µ, –∏—â–µ—Ç —Å–∫—Ä–∏–ø—Ç—ã, –∞ —Ç–∞–∫–∂–µ –æ–±—Ö–æ–¥–∏—Ç —Å—Å—ã–ª–∫–∏\n\n"
    welcome_text += "–ü–æ—á–µ–º—É —è –ª—É—á—à–∏–π?\n"
    welcome_text += "‚Ä¢ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã ‚Äî –±–∞–∑–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ!\n"
    welcome_text += "‚Ä¢ –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ ‚Äî –≤—Å–µ —Å–∫—Ä–∏–ø—Ç—ã —Å –∫–∞–Ω–∞–ª–∞ –≤ –æ–¥–Ω–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ!\n"
    welcome_text += "‚Ä¢ –ü–æ–∏—Å–∫ —Å–∫—Ä–∏–ø—Ç–æ–≤ ‚Äî –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É –∏ –ø–æ–ª—É—á–∏ –º–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–æ–≤ –Ω–∞ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å!\n"
    welcome_text += "‚Ä¢ –û–±—Ö–æ–¥ —Å—Å—ã–ª–æ–∫ ‚Äî –±–æ—Ç —É–º–µ–µ—Ç –æ–±—Ö–æ–¥–∏—Ç—å —Å—Å—ã–ª–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä linkvertise, loot-link, lootlabs, lootdest –∏ –¥—Ä—É–≥–∏–µ!\n\n"
    welcome_text += "–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞, –Ω–∞–ø–∏—à–∏ /help"
    
    if is_admin:
        welcome_text += "\n\n‚ö° –í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —ç—Ç–æ–≥–æ –±–æ—Ç–∞!"
    
    await message.answer(welcome_text)

start_router = router