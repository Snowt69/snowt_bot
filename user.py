from aiogram import Router, types, F, Bot
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command
from aiogram import BaseMiddleware
from aiogram.types import Message, TelegramObject, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from typing import Callable, Dict, Awaitable, Any, List
from database import Database
from config import config
import logging

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()
db = Database()
logger = logging.getLogger(__name__)

# Middleware –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
class UserMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ, —á—Ç–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        if not isinstance(event, Message):
            return await handler(event, data)

        user = event.from_user
        
        try:
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db.add_user(
                user_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            db.update_user_activity(user.id)
            
            logger.debug(f"User activity updated: {user.id} (@{user.username})")
            
        except Exception as e:
            logger.error(f"User tracking error: {e}", exc_info=True)
            
        return await handler(event, data)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–ø–æ—Ä—Ç–æ–≤
class ReportStates(StatesGroup):
    waiting_for_report = State()

def get_subscription_check_keyboard(channels: List[Dict[str, Any]]) -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    builder = InlineKeyboardBuilder()
    
    for channel in channels:
        username = channel.get('username')
        if username:
            builder.button(
                text=f"üì¢ {channel['title']}", 
                url=f"https://t.me/{username}"
            )
    
    builder.button(
        text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è",
        callback_data="check_subscription"
    )
    
    builder.adjust(1)
    return builder.as_markup()

class SubscriptionCheckMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if not isinstance(event, (Message, CallbackQuery)):
            return await handler(event, data)
            
        # –ü–æ–ª—É—á–∞–µ–º user_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
        user_id = event.from_user.id
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start –∏ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
        if (isinstance(event, Message) and event.text and event.text.startswith('/start')) or \
           (isinstance(event, CallbackQuery) and event.data == 'check_subscription'):
            return await handler(event, data)
            
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        required_channels = db.get_all_subscription_channels()
        if not required_channels:
            return await handler(event, data)
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª
        bot = data.get('bot')
        not_subscribed = []
        
        for channel in required_channels:
            try:
                chat_member = await bot.get_chat_member(
                    chat_id=channel['channel_id'],
                    user_id=user_id
                )
                if chat_member.status in ['left', 'kicked']:
                    not_subscribed.append(channel)
            except Exception as e:
                logger.error(f"Error checking subscription for channel {channel['channel_id']}: {e}")
                continue
                
        if not_subscribed:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
            channels_text = "\n".join(
                f"- {channel['title']} (@{channel.get('username', '–Ω–µ—Ç')})"
                for channel in not_subscribed
            )
            
            if isinstance(event, Message):
                await event.answer(
                    f"üì¢ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã:\n\n{channels_text}",
                    reply_markup=get_subscription_check_keyboard(not_subscribed)
                )
            elif isinstance(event, CallbackQuery):
                await event.message.edit_text(
                    f"üì¢ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã:\n\n{channels_text}",
                    reply_markup=get_subscription_check_keyboard(not_subscribed)
                )
            return
            
        return await handler(event, data)

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (help, profile, report –∏ —Ç.–¥.)
@router.message(Command("help"))
async def help_handler(message: types.Message):
    await message.answer("""
    –í–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞:
    ‚Ä¢ /start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
    ‚Ä¢ /help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    ‚Ä¢ /profile ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    ‚Ä¢ /report ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É
    ‚Ä¢ /catalog ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Å–∫—Ä–∏–ø—Ç–æ–≤
    
    –î–ª—è –∞–¥–º–∏–Ω–æ–≤:
    ‚Ä¢ /admin ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å""")

@router.message(Command("profile"))
async def profile_handler(message: types.Message):
    user = db.get_user(message.from_user.id)
    
    if user:
        text = (
            f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"üë§ –ò–º—è: {user['first_name']}\n"
            f"üÜî ID: {user['user_id']}\n"
            f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user['join_date']}\n"
            f"üîó –ü–µ—Ä–µ—Ö–æ–¥–æ–≤: {user['link_visits']}"
        )
        await message.answer(text)
    else:
        await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

@router.message(Command("report"))
async def report_handler(message: types.Message, state: FSMContext):
    await state.set_state(ReportStates.waiting_for_report)
    await message.answer(
        "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –∂–∞–ª–æ–±—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n"
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –µ—ë –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
        "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É, –Ω–∞–ø–∏—à–∏—Ç–µ /cancel"
    )

@router.message(ReportStates.waiting_for_report, F.text)
async def process_report(message: types.Message, state: FSMContext):
    report_text = message.text
    user_id = message.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–ø–æ—Ä—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    report_id = db.create_report(user_id, report_text)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    admins = db.get_all_admins()
    for admin in admins:
        try:
            await message.bot.send_message(
                chat_id=admin['user_id'],
                text=f"üì¢ –ù–æ–≤—ã–π —Ä–µ–ø–æ—Ä—Ç #{report_id}\n"
                     f"–û—Ç: @{message.from_user.username or '–Ω–µ—Ç'} (ID: {user_id})\n"
                     f"–°–æ–æ–±—â–µ–Ω–∏–µ: {report_text[:200]}..."
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin['user_id']}: {e}")
    
    await message.answer(f"‚úÖ –í–∞—à —Ä–µ–ø–æ—Ä—Ç #{report_id} –ø—Ä–∏–Ω—è—Ç! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.")
    await state.clear()

@router.message(Command("cancel"))
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    
    await state.clear()
    await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

user_router = router